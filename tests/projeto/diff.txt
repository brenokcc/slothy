diff --git a/slothy/__main__.py b/slothy/__main__.py
index cca2387..ad9e2b4 100644
--- a/slothy/__main__.py
+++ b/slothy/__main__.py
@@ -121,7 +121,7 @@ MEDIA_URL = '/media/'
 
 MODEL_FILE_CONTENT = '''# -*- coding: utf-8 -*-
 from slothy.db import models
-from slothy.api.models import AbstractUser
+from slothy.api.models import User
 from slothy.decorators import attr, action, param, fieldset, dashboard, fieldsets
 from slothy.decorators import user, role, attr, action, fieldset, param
 
@@ -132,10 +132,10 @@ class PessoaSet(models.Set):
     def all(self):
         return self.display(
             'foto', 'nome', 'email'
-        ).search_by('nome')
+        ).search('nome')
 
 
-class Pessoa(AbstractUser):
+class Pessoa(User):
 
     nome = models.CharField(verbose_name='Nome')
     email = models.EmailField(verbose_name='E-mail', unique=True, is_username=True)
diff --git a/slothy/api/forms.py b/slothy/api/forms.py
index fa3097c..6b0a68d 100644
--- a/slothy/api/forms.py
+++ b/slothy/api/forms.py
@@ -8,7 +8,7 @@ from slothy.forms import Form
 
 
 class LoginForm(Form):
-    username = forms.CharField(label='Usuário')
+    username = forms.CharField(label='Login')
     password = forms.CharField(label='Senha')
 
     class Meta:
diff --git a/slothy/api/migrations/0001_initial.py b/slothy/api/migrations/0001_initial.py
new file mode 100644
index 0000000..32bf958
--- /dev/null
+++ b/slothy/api/migrations/0001_initial.py
@@ -0,0 +1,28 @@
+# Generated by Django 3.1.7 on 2021-03-06 14:12
+
+from django.db import migrations, models
+import slothy.db.models.fields
+
+
+class Migration(migrations.Migration):
+
+    initial = True
+
+    dependencies = [
+    ]
+
+    operations = [
+        migrations.CreateModel(
+            name='User',
+            fields=[
+                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
+                ('password', slothy.db.models.fields.CharField(blank=True, default='!', max_length=255, null=True, verbose_name='Senha')),
+                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='Último Login')),
+                ('is_superuser', models.BooleanField(default=False, verbose_name='Superusuário')),
+            ],
+            options={
+                'verbose_name': 'Usuário',
+                'verbose_name_plural': 'Usuários',
+            },
+        ),
+    ]
diff --git a/slothy/api/migrations/0002_user_username.py b/slothy/api/migrations/0002_user_username.py
new file mode 100644
index 0000000..aae38ea
--- /dev/null
+++ b/slothy/api/migrations/0002_user_username.py
@@ -0,0 +1,20 @@
+# Generated by Django 3.1.7 on 2021-03-06 14:20
+
+from django.db import migrations
+import slothy.db.models.fields
+
+
+class Migration(migrations.Migration):
+
+    dependencies = [
+        ('api', '0001_initial'),
+    ]
+
+    operations = [
+        migrations.AddField(
+            model_name='user',
+            name='username',
+            field=slothy.db.models.fields.CharField(default=None, max_length=255, unique=True, verbose_name='Login'),
+            preserve_default=False,
+        ),
+    ]
diff --git a/tests/project/__init__.py b/slothy/api/migrations/__init__.py
similarity index 100%
rename from tests/project/__init__.py
rename to slothy/api/migrations/__init__.py
diff --git a/slothy/api/models.py b/slothy/api/models.py
index 9d5f3a5..319ae4d 100644
--- a/slothy/api/models.py
+++ b/slothy/api/models.py
@@ -1,37 +1,20 @@
 # -*- coding: utf-8 -*-
 
 import six
-from django.apps import apps
 from slothy.db import models
 from django.contrib.auth import base_user
 
 
-class Group(models.Model):
-    name = models.CharField(verbose_name='Name', max_length=255)
-    lookup = models.CharField(verbose_name='Chave', max_length=255)
-
-    class Meta:
-        verbose_name = 'Grupo'
-        verbose_name_plural = 'Grupos'
-
-    def get_users(self):
-        from django.conf import settings
-        user_model_name = settings.AUTH_USER_MODEL.split('.')[1].lower()
-        return getattr(self, '{}_set'.format(user_model_name)).all()
-
-    def __str__(self):
-        return self.name
-
-
-class AbstractUser(six.with_metaclass(models.ModelBase, base_user.AbstractBaseUser, models.Model)):
-
+class User(six.with_metaclass(models.ModelBase, base_user.AbstractBaseUser, models.Model)):
+    USERNAME_FIELD = 'username'
+    username = models.CharField(verbose_name='Login', unique=True)
     password = models.CharField(verbose_name='Senha', null=True, blank=True, default='!', max_length=255)
     last_login = models.DateTimeField(verbose_name='Último Login', null=True, blank=True)
-    #is_superuser = models.BooleanField(verbose_name='Superusuário', default=False)
-    groups = models.ManyToManyField(Group, verbose_name='Grupos', blank=True)
+    is_superuser = models.BooleanField(verbose_name='Superusuário', default=False)
 
     class Meta:
-        abstract = True
+        verbose_name = 'Usuário'
+        verbose_name_plural = 'Usuários'
 
     def change_password(self, raw_password):
         super().set_password(raw_password)
diff --git a/slothy/api/views.py b/slothy/api/views.py
index 2cbb867..04967d4 100644
--- a/slothy/api/views.py
+++ b/slothy/api/views.py
@@ -148,7 +148,6 @@ def postman(request):
 
 def api(request, service, path):
     auhtorization = request.headers.get('Authorization', '')
-    print(auhtorization)
     if auhtorization.startswith('Token'):
         token = auhtorization.split(' ')[-1]
         user_model = apps.get_model(settings.AUTH_USER_MODEL)
@@ -223,14 +222,13 @@ def api(request, service, path):
                             func = instance.view
                         else:
 
-                            if len(tokens) == 4:  # object subset, meta or action
-                                func = getattr(instance, tokens[3])  # object meta or action
-                                caller = dict(
-                                    app_label=tokens[0],
-                                    model_name=tokens[1],
-                                    id=tokens[2],
-                                    attr_name=tokens[3],
-                                )
+                            if len(tokens) == 4:  # object attr or action
+                                func = getattr(instance, tokens[3])
+                                metadata = getattr(func, '_metadata')
+                                if metadata['type'] == 'attr':  # object attr
+                                    def func():
+                                        return instance.serialize(tokens[3])
+                                    setattr(func, '_metadata', metadata)
                             else:  # object relation (add or remove)
                                 qs = getattr(instance, tokens[3])()
 
@@ -310,15 +308,6 @@ def api(request, service, path):
                         output = func()
                         if output is None:
                             response = dict(type="message", text=metadata.get('message'))
-                        elif caller and metadata['type'] == 'attr':
-                            if isinstance(output, ValueSet) and output.nested:
-                                response = dict(type='object', name=str(instance), data=output)
-                            else:
-                                if isinstance(output, QuerySet):
-                                    setattr(output, '_caller', caller)
-                                fieldset = {metadata['verbose_name']: output.serialize() if hasattr(
-                                    output, 'serialize') else output}
-                                response = dict(type='object', name=str(instance), data=fieldset)
                         elif isinstance(output, QuerySet):
                             output = output.apply_lookups(request.user)
                             if metadata['name'] == 'all':
diff --git a/slothy/core/management/commands/sync.py b/slothy/core/management/commands/sync.py
index 3d1c3cb..3773922 100644
--- a/slothy/core/management/commands/sync.py
+++ b/slothy/core/management/commands/sync.py
@@ -1,4 +1,5 @@
 # -*- coding: utf-8 -*-
+from slothy.api.models import User
 from django.core.management import call_command
 from django.conf import settings
 from django.core.management.base import BaseCommand
@@ -14,3 +15,10 @@ class Command(BaseCommand):
 
         call_command('makemigrations', *app_labels)
         call_command('migrate')
+
+        if not User.objects.filter(username='admin').exists():
+            user = User.objects.create(username='admin')
+            user.set_password('password')
+            user.is_superuser = True
+            user.save()
+            print('The user "admin" with password "password" was created.')
diff --git a/slothy/db/models/__init__.py b/slothy/db/models/__init__.py
index 60f7044..07a6856 100644
--- a/slothy/db/models/__init__.py
+++ b/slothy/db/models/__init__.py
@@ -164,7 +164,7 @@ class ValueSet(dict):
     def __init__(self, obj, *lookups, verbose=True, detail=False):
         self.obj = obj
         self.thumbnail = None
-        self.actions = []
+        self.action_list = []
         self.nested_keys = []
         self.nested = False
         super().__init__()
@@ -201,7 +201,7 @@ class ValueSet(dict):
         self.thumbnail = getattr(self.obj, lookup)
         return self
 
-    def allow(self, *lookups):
+    def actions(self, *lookups):
         model = type(self.obj)
         for lookup in lookups:
             action_func = getattr(model, lookup)
@@ -214,7 +214,7 @@ class ValueSet(dict):
                 model.get_metadata('model_name'),
                 self.obj.pk, lookup
             )
-            self.actions.append(
+            self.action_list.append(
                 {'name': lookup, 'label': action_verbose_name, 'icon': action_icon, 'params': action_params, 'url': action_url}
             )
         return self
@@ -268,6 +268,13 @@ class QuerySet(query.QuerySet):
         self._iterable_class = ModelIterable
         self._lookups = ()
         self._caller = None
+        self._applied = False
+
+    # def _fetch_all(self):
+    #     print(999)
+    #     if not self._applied and self._user:
+    #         qs = self.apply_lookups()
+    #     return super()._fetch_all()
 
     def filter(self, *args, **kwargs):
         low_mark = self.query.low_mark
@@ -290,7 +297,7 @@ class QuerySet(query.QuerySet):
             self._list_display.append(lookup)
         return self
 
-    def filter_by(self, *list_filter):
+    def filters(self, *list_filter):
         self._list_filter = list_filter
         return self
 
@@ -308,7 +315,7 @@ class QuerySet(query.QuerySet):
             self._list_subsets = self.model.get_metadata('list_subsets')
         return self._list_subsets
 
-    def allow(self, *list_actions):
+    def actions(self, *list_actions):
         self._list_actions = list_actions
         return self
 
@@ -327,9 +334,21 @@ class QuerySet(query.QuerySet):
     def get_page_size(self):
         return self._page_size
 
-    def search_by(self, *search_fields):
-        self._list_search = search_fields
-        return self
+    def search(self, *search_fields, q=None):
+        if search_fields:
+            self._list_search = search_fields
+        if q is None:
+            return self
+        else:
+            search_fields = self._list_search
+            queryset = self.none()
+            if not search_fields:
+                local_fields = self.model.get_metadata('local_fields')
+                search_fields = [field.name for field in local_fields if field.__class__.__name__ == 'CharField']
+            for search_field in search_fields:
+                queryset = queryset | self.filter(**{'{}__icontains'.format(search_field): q})
+            return queryset
+
 
     def get_list_search(self):
         return self._list_search
@@ -471,6 +490,8 @@ class QuerySet(query.QuerySet):
 
         if user.pk is None:
             return self
+        elif user.is_superuser:
+            return self
         elif lookups == ():
             return self
         else:
@@ -498,16 +519,6 @@ class QuerySet(query.QuerySet):
                 return self.filter(reduce(operator.__or__, filters))
         return self.none()
 
-    def search(self, q):
-        queryset = self.none()
-        search_fields = self._list_search
-        if not search_fields:
-            local_fields = self.model.get_metadata('local_fields')
-            search_fields = [field.name for field in local_fields if field.__class__.__name__ == 'CharField']
-        for search_field in search_fields:
-            queryset = queryset | self.filter(**{'{}__icontains'.format(search_field): q})
-        return queryset
-
     def dump_query(self):
         return signing.dumps(base64.b64encode(zlib.compress(cpickle.dumps(self.query))).decode())
 
@@ -571,6 +582,7 @@ class QuerySet(query.QuerySet):
                 {'name': lookup, 'label': self.model.get_verbose_name(lookup)}
             )
         for lookup in self._list_actions:
+            action_condition = None
             action_params = True
             if self._caller:
                 action_url = '/api/{}/{}/{}/{}/{}'.format(
@@ -630,7 +642,7 @@ class QuerySet(query.QuerySet):
             qs = self
 
         if self._q:
-            qs = qs.search(self._q)
+            qs = qs.search(q=self._q)
 
         if self._sorter:
             qs = qs.order_by(self._sorter)
@@ -758,32 +770,8 @@ class ModelBase(base.ModelBase):
                     objects=LocalManager()
                 )
 
-        if 'AbstractUser' in (cls.__name__ for cls in bases):
-            username_field = None
-            for attr_name in attrs:
-                attr = attrs[attr_name]
-                if getattr(attr, 'is_username', False):
-                    username_field = attr_name
-            if username_field:
-                attrs.update(USERNAME_FIELD=username_field)
-            setattr(settings, 'AUTH_USER_MODEL', '{}.{}'.format(fromlist[-2], name))
-
         cls = super().__new__(mcs, name, bases, attrs)
 
-        if 'AbstractUser' in (cls.__name__ for cls in bases):
-            AUTH_USER_MODEL = cls
-
-        for field in cls._meta.fields:
-            if hasattr(field, 'inherits_role'):
-                metadata = getattr(cls, '_metadata', {})
-                metadata.update(role_field_name=field.name)
-                setattr(cls, '_metadata', metadata)
-
-        if AUTH_USER_MODEL and issubclass(cls, AUTH_USER_MODEL):
-            metadata = getattr(cls, '_metadata', {})
-            metadata.update(role_field_name='id')
-            setattr(cls, '_metadata', metadata)
-
         return cls
 
 
@@ -803,6 +791,12 @@ class Model(six.with_metaclass(ModelBase, models.Model)):
             queryset = value.get_queryset()
             queryset._related_manager = value
             queryset._related_attribute = item
+            queryset._caller = dict(
+                                    app_label=self.get_metadata('app_label'),
+                                    model_name=self.get_metadata('model_name'),
+                                    id=self.id,
+                                    attr_name=item,
+                                )
             return queryset
         return value
 
@@ -824,7 +818,7 @@ class Model(six.with_metaclass(ModelBase, models.Model)):
                         fieldsets.append(item)
                     data[item['key']].append(item)
 
-        fieldsets = sorted(fieldsets, key=lambda item: item['order'])
+        fieldsets = sorted(fieldsets, key=lambda tmp: tmp['order'])
 
         current_display_name = getattr(self, '_current_display_name', None)
         if current_display_name is None:
@@ -836,6 +830,7 @@ class Model(six.with_metaclass(ModelBase, models.Model)):
                 dimensions[item['verbose_name']] = getattr(self, item['name'])().serialize()
             else:
                 dimensions[item['verbose_name']] = []
+        print(dimensions.keys())
 
         if not fieldsets:
             fieldsets.append(dict(name='default_viewset'))
@@ -928,6 +923,8 @@ class Model(six.with_metaclass(ModelBase, models.Model)):
 
         if user.pk is None:
             return True
+        elif user.is_superuser:
+            return True
         elif lookups == ():
             return True
         else:
diff --git a/slothy/db/models/fields.py b/slothy/db/models/fields.py
index 2ae3825..5e27d18 100644
--- a/slothy/db/models/fields.py
+++ b/slothy/db/models/fields.py
@@ -14,8 +14,6 @@ class CharField(models.CharField):
     def __init__(self, *args, **kwargs):
         if 'max_length' not in kwargs:
             kwargs.update(max_length=255)
-        if 'is_username' in kwargs:
-            self.is_username = kwargs.pop('is_username')
         super().__init__(*args, **kwargs)
 
 
@@ -32,8 +30,6 @@ class EmailField(models.EmailField):
     def __init__(self, *args, **kwargs):
         if 'max_length' not in kwargs:
             kwargs.update(max_length=255)
-        if 'is_username' in kwargs:
-            self.is_username = kwargs.pop('is_username')
         super().__init__(*args, **kwargs)
 
 
diff --git a/slothy/db/utils.py b/slothy/db/utils.py
index eb05d10..2e64c26 100644
--- a/slothy/db/utils.py
+++ b/slothy/db/utils.py
@@ -30,7 +30,7 @@ def get_link(func_or_class):
         elif hasattr(func_or_class, 'markdown'):
             module_name = 'markdown'
         url = '/api/{}/{}'.format(module_name, func_or_class.__name__.lower())
-        return dict(icon=None, url=url, label=None)
+        return dict(icon=None, url=url, label='')
     else:
         func_name = func_or_class.__name__
         metadata = getattr(func_or_class, '_metadata')
@@ -96,7 +96,7 @@ def serialize(obj, detail=False):
             return ', '.join((str(instance) for instance in obj)) or None
     elif isinstance(obj, ValueSet):
         if detail:
-            return dict(type='valueset', fields=obj.get_nested_values(), actions=obj.actions)
+            return dict(type='valueset', fields=obj.get_nested_values(), actions=obj.action_list)
         else:
             for key in obj:
                 obj[key] = serialize(obj[key], detail=False)
diff --git a/slothy/decorators/__init__.py b/slothy/decorators/__init__.py
index 66c0486..1e48ed3 100644
--- a/slothy/decorators/__init__.py
+++ b/slothy/decorators/__init__.py
@@ -7,24 +7,6 @@ from slothy.api import functions
 order = 0
 
 
-def user(username_field_name):
-    def decorate(cls):
-        cls.USERNAME_FIELD = username_field_name
-        return cls
-
-    return decorate
-
-
-def role(field='id'):
-    def decorate(cls):
-        metadata = getattr(cls, '_metadata', {})
-        metadata.update(role_field_name=field)
-        setattr(cls, '_metadata', metadata)
-        return cls
-
-    return decorate
-
-
 def attr(verbose_name, condition=None, formatter=None, lookups=(), icon=None):
     def decorate(func):
         global order
@@ -146,26 +128,31 @@ def setdata(key, func, lookups, formatter=None):
 
 def fieldsets(data):
     def decorate(func):
-        if isinstance(data, dict):
-            metadata = getattr(func, '_metadata', {})
-            _fieldsets = {}
-            for verbose_name, str_or_tuples in data.items():
-                _fieldsets[verbose_name] = []
-                if isinstance(str_or_tuples, str):  # sigle field
-                    _fieldsets[verbose_name].append((str_or_tuples,))
-                else:  # multiple fields
-                    for str_or_tuple in str_or_tuples:
-                        if isinstance(str_or_tuple, str):  # string
-                            _fieldsets[verbose_name].append((str_or_tuple,))
-                        else:  # tuple
-                            _fieldsets[verbose_name].append(str_or_tuple)
-            metadata.update(fieldsets=_fieldsets)
-            setattr(func, '_metadata', metadata)
-        else:
-            metadata = getattr(func, '_metadata', {})
-            metadata.update(verbose_name=data)
-            setattr(func, '_metadata', metadata)
-            setdata('tab', func, None)
+        metadata = getattr(func, '_metadata', {})
+        _fieldsets = {}
+        for verbose_name, str_or_tuples in data.items():
+            _fieldsets[verbose_name] = []
+            if isinstance(str_or_tuples, str):  # sigle field
+                _fieldsets[verbose_name].append((str_or_tuples,))
+            else:  # multiple fields
+                for str_or_tuple in str_or_tuples:
+                    if isinstance(str_or_tuple, str):  # string
+                        _fieldsets[verbose_name].append((str_or_tuple,))
+                    else:  # tuple
+                        _fieldsets[verbose_name].append(str_or_tuple)
+        metadata.update(fieldsets=_fieldsets)
+        setattr(func, '_metadata', metadata)
+        return func
+
+    return decorate
+
+
+def tab(data):
+    def decorate(func):
+        metadata = getattr(func, '_metadata', {})
+        metadata.update(verbose_name=data)
+        setattr(func, '_metadata', metadata)
+        setdata('tab', func, None)
         return func
 
     return decorate
diff --git a/slothy/regional/brasil/enderecos/models.py b/slothy/regional/brasil/enderecos/models.py
index fb80340..b635a45 100644
--- a/slothy/regional/brasil/enderecos/models.py
+++ b/slothy/regional/brasil/enderecos/models.py
@@ -44,7 +44,7 @@ class EstadoSet(models.Set):
 
     @attr('Estados', icon='map')
     def all(self):
-        return self.display('nome', 'sigla', 'codigo', 'regiao').search_by('nome', 'sigla')
+        return self.display('nome', 'sigla', 'codigo', 'regiao').search('nome', 'sigla')
 
 
 class Estado(models.Model):
@@ -82,7 +82,7 @@ class MunicipioSet(models.Set):
 
     @attr('Municípios')
     def all(self):
-        return self.display('nome', 'estado', 'codigo').search_by('nome')
+        return self.display('nome', 'estado', 'codigo').search('nome')
 
 
 class Municipio(models.Model):
diff --git a/tests/project/base/__init__.py b/tests/project/base/__init__.py
deleted file mode 100644
index e69de29..0000000
diff --git a/tests/project/base/forms.py b/tests/project/base/forms.py
deleted file mode 100644
index 5c501e0..0000000
--- a/tests/project/base/forms.py
+++ /dev/null
@@ -1,25 +0,0 @@
-from slothy.forms import Form
-from django import forms
-from slothy.decorators import dashboard
-
-
-@dashboard.card()
-@dashboard.center()
-class Teste(Form):
-    nome = forms.CharField(label='Nome')
-    data = forms.DateField(label='Data')
-
-    class Meta:
-        title = 'Formulário'
-        icon = 'play'
-        lookups = ()
-        fieldsets = {
-            'Dados Gerais': ('nome', 'data')
-        }
-
-    def show(self):
-        return super().show()
-
-    def submit(self):
-        print(self.data)
-
diff --git a/tests/project/base/migrations/0001_initial.py b/tests/project/base/migrations/0001_initial.py
deleted file mode 100644
index 061f92e..0000000
--- a/tests/project/base/migrations/0001_initial.py
+++ /dev/null
@@ -1,153 +0,0 @@
-# Generated by Django 3.1.5 on 2021-01-25 14:45
-
-from django.conf import settings
-from django.db import migrations, models
-import django.db.models.deletion
-import slothy.db.models.fields
-
-
-class Migration(migrations.Migration):
-
-    initial = True
-
-    dependencies = [
-        ('api', '__first__'),
-    ]
-
-    operations = [
-        migrations.CreateModel(
-            name='Pessoa',
-            fields=[
-                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
-                ('password', models.CharField(blank=True, default='!', max_length=255, null=True, verbose_name='Senha')),
-                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='Último Login')),
-                ('nome', models.CharField(max_length=255, verbose_name='Nome')),
-                ('email', models.EmailField(max_length=255, unique=True, verbose_name='E-mail')),
-                ('foto', models.ImageField(blank=True, null=True, upload_to='fotos', verbose_name='Foto')),
-            ],
-            options={
-                'verbose_name': 'Pessoa',
-                'verbose_name_plural': 'Pessoas',
-            },
-        ),
-        migrations.CreateModel(
-            name='Cidade',
-            fields=[
-                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
-                ('nome', models.CharField(max_length=255, verbose_name='Nome')),
-            ],
-            options={
-                'verbose_name': 'Cidade',
-                'verbose_name_plural': 'Cidades',
-            },
-        ),
-        migrations.CreateModel(
-            name='Estado',
-            fields=[
-                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
-                ('nome', models.CharField(max_length=255, verbose_name='Nome')),
-                ('sigla', models.CharField(max_length=255, verbose_name='Sigla')),
-                ('ativo', models.BooleanField(default=True, verbose_name='Ativo')),
-                ('cor', slothy.db.models.fields.ColorField(default='#FFFFFF', max_length=10, verbose_name='Cor')),
-            ],
-            options={
-                'verbose_name': 'Estado',
-                'verbose_name_plural': 'Estados',
-            },
-        ),
-        migrations.CreateModel(
-            name='PontoTuristico',
-            fields=[
-                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
-                ('foto', models.ImageField(blank=True, null=True, upload_to='fotos', verbose_name='Foto')),
-                ('nome', models.CharField(max_length=255, verbose_name='Nome')),
-            ],
-            options={
-                'verbose_name': 'Ponto Turístico',
-                'verbose_name_plural': 'Pontos Turísticos',
-            },
-        ),
-        migrations.CreateModel(
-            name='Telefone',
-            fields=[
-                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
-                ('ddd', models.IntegerField(verbose_name='DDD')),
-                ('numero', models.CharField(max_length=255, verbose_name='Telefone')),
-            ],
-            options={
-                'verbose_name': 'Telefone',
-                'verbose_name_plural': 'Telefones',
-            },
-        ),
-        migrations.CreateModel(
-            name='Presidente',
-            fields=[
-                ('pessoa_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='base.pessoa')),
-            ],
-            options={
-                'verbose_name': 'Presidente',
-                'verbose_name_plural': 'Presidentes',
-            },
-            bases=('base.pessoa',),
-        ),
-        migrations.CreateModel(
-            name='Governador',
-            fields=[
-                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
-                ('estado', slothy.db.models.fields.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='base.estado', verbose_name='Estado')),
-                ('pessoa', slothy.db.models.fields.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL, verbose_name='Pessoa')),
-            ],
-            options={
-                'verbose_name': 'Governador',
-                'verbose_name_plural': 'Governadores',
-            },
-        ),
-        migrations.CreateModel(
-            name='Endereco',
-            fields=[
-                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
-                ('logradouro', models.CharField(max_length=100, verbose_name='Logradouro')),
-                ('numero', models.IntegerField(verbose_name='Número')),
-                ('cidade', slothy.db.models.fields.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='base.cidade', verbose_name='Cidade')),
-            ],
-            options={
-                'verbose_name': 'Endereço',
-                'verbose_name_plural': 'Endereços',
-            },
-        ),
-        migrations.AddField(
-            model_name='cidade',
-            name='estado',
-            field=slothy.db.models.fields.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='base.estado', verbose_name='Estado'),
-        ),
-        migrations.AddField(
-            model_name='cidade',
-            name='pontos_turisticos',
-            field=models.ManyToManyField(blank=True, to='base.PontoTuristico', verbose_name='Pontos Turísticos'),
-        ),
-        migrations.AddField(
-            model_name='cidade',
-            name='prefeito',
-            field=slothy.db.models.fields.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL, verbose_name='Prefeito'),
-        ),
-        migrations.AddField(
-            model_name='cidade',
-            name='vereadores',
-            field=slothy.db.models.fields.ManyToManyField(blank=True, related_name='cidades_legisladas', to=settings.AUTH_USER_MODEL, verbose_name='Vereadores'),
-        ),
-        migrations.AddField(
-            model_name='pessoa',
-            name='endereco',
-            field=slothy.db.models.fields.OneToOneField(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='base.endereco', verbose_name='Endereço'),
-        ),
-        migrations.AddField(
-            model_name='pessoa',
-            name='groups',
-            field=models.ManyToManyField(blank=True, to='api.Group', verbose_name='Grupos'),
-        ),
-        migrations.AddField(
-            model_name='pessoa',
-            name='telefones',
-            field=slothy.db.models.fields.OneToManyField(to='base.Telefone', verbose_name='Telefones'),
-        ),
-    ]
diff --git a/tests/project/base/migrations/0002_auto_20210129_0607.py b/tests/project/base/migrations/0002_auto_20210129_0607.py
deleted file mode 100644
index e75d093..0000000
--- a/tests/project/base/migrations/0002_auto_20210129_0607.py
+++ /dev/null
@@ -1,59 +0,0 @@
-# Generated by Django 3.1.5 on 2021-01-29 06:07
-
-from django.db import migrations
-import slothy.db.models.fields
-
-
-class Migration(migrations.Migration):
-
-    dependencies = [
-        ('base', '0001_initial'),
-    ]
-
-    operations = [
-        migrations.AlterField(
-            model_name='cidade',
-            name='nome',
-            field=slothy.db.models.fields.CharField(max_length=255, verbose_name='Nome'),
-        ),
-        migrations.AlterField(
-            model_name='endereco',
-            name='logradouro',
-            field=slothy.db.models.fields.CharField(max_length=100, verbose_name='Logradouro'),
-        ),
-        migrations.AlterField(
-            model_name='estado',
-            name='cor',
-            field=slothy.db.models.fields.ColorField(blank=True, default='#FFFFFF', max_length=10, verbose_name='Cor'),
-        ),
-        migrations.AlterField(
-            model_name='estado',
-            name='nome',
-            field=slothy.db.models.fields.CharField(max_length=255, verbose_name='Nome'),
-        ),
-        migrations.AlterField(
-            model_name='estado',
-            name='sigla',
-            field=slothy.db.models.fields.CpfField(max_length=255, verbose_name='Sigla'),
-        ),
-        migrations.AlterField(
-            model_name='pessoa',
-            name='nome',
-            field=slothy.db.models.fields.CharField(max_length=255, verbose_name='Nome'),
-        ),
-        migrations.AlterField(
-            model_name='pessoa',
-            name='password',
-            field=slothy.db.models.fields.CharField(blank=True, default='!', max_length=255, null=True, verbose_name='Senha'),
-        ),
-        migrations.AlterField(
-            model_name='pontoturistico',
-            name='nome',
-            field=slothy.db.models.fields.CharField(max_length=255, verbose_name='Nome'),
-        ),
-        migrations.AlterField(
-            model_name='telefone',
-            name='numero',
-            field=slothy.db.models.fields.CharField(max_length=255, verbose_name='Telefone'),
-        ),
-    ]
diff --git a/tests/project/base/migrations/0003_auto_20210131_1724.py b/tests/project/base/migrations/0003_auto_20210131_1724.py
deleted file mode 100644
index e2c1de6..0000000
--- a/tests/project/base/migrations/0003_auto_20210131_1724.py
+++ /dev/null
@@ -1,33 +0,0 @@
-# Generated by Django 3.1.5 on 2021-01-31 17:24
-
-from django.db import migrations
-import slothy.db.models.fields
-
-
-class Migration(migrations.Migration):
-
-    dependencies = [
-        ('enderecos', '0002_auto_20210129_0606'),
-        ('base', '0002_auto_20210129_0607'),
-    ]
-
-    operations = [
-        migrations.CreateModel(
-            name='Municipio',
-            fields=[
-            ],
-            options={
-                'verbose_name': 'Município',
-                'verbose_name_plural': 'Municípios',
-                'proxy': True,
-                'indexes': [],
-                'constraints': [],
-            },
-            bases=('enderecos.municipio',),
-        ),
-        migrations.AddField(
-            model_name='cidade',
-            name='localizacao',
-            field=slothy.db.models.fields.GeoLocationField(max_length=255, null=True, verbose_name='Localização'),
-        ),
-    ]
diff --git a/tests/project/base/migrations/0004_pontoturistico_ativo.py b/tests/project/base/migrations/0004_pontoturistico_ativo.py
deleted file mode 100644
index 0369b12..0000000
--- a/tests/project/base/migrations/0004_pontoturistico_ativo.py
+++ /dev/null
@@ -1,18 +0,0 @@
-# Generated by Django 3.1.5 on 2021-02-01 18:14
-
-from django.db import migrations, models
-
-
-class Migration(migrations.Migration):
-
-    dependencies = [
-        ('base', '0003_auto_20210131_1724'),
-    ]
-
-    operations = [
-        migrations.AddField(
-            model_name='pontoturistico',
-            name='ativo',
-            field=models.BooleanField(default=True, verbose_name='Ativo'),
-        ),
-    ]
diff --git a/tests/project/base/migrations/0005_auto_20210217_1932.py b/tests/project/base/migrations/0005_auto_20210217_1932.py
deleted file mode 100644
index fde1a21..0000000
--- a/tests/project/base/migrations/0005_auto_20210217_1932.py
+++ /dev/null
@@ -1,24 +0,0 @@
-# Generated by Django 3.1.5 on 2021-02-17 19:32
-
-from django.db import migrations
-import slothy.db.models.fields
-
-
-class Migration(migrations.Migration):
-
-    dependencies = [
-        ('base', '0004_pontoturistico_ativo'),
-    ]
-
-    operations = [
-        migrations.AlterField(
-            model_name='cidade',
-            name='localizacao',
-            field=slothy.db.models.fields.GeoLocationField(blank=True, max_length=255, null=True, verbose_name='Localização'),
-        ),
-        migrations.AlterField(
-            model_name='pessoa',
-            name='email',
-            field=slothy.db.models.fields.EmailField(max_length=255, unique=True, verbose_name='E-mail'),
-        ),
-    ]
diff --git a/tests/project/base/migrations/__init__.py b/tests/project/base/migrations/__init__.py
deleted file mode 100644
index e69de29..0000000
diff --git a/tests/project/base/models.py b/tests/project/base/models.py
deleted file mode 100644
index 5e5f219..0000000
--- a/tests/project/base/models.py
+++ /dev/null
@@ -1,568 +0,0 @@
-# -*- coding: utf-8 -*-
-import datetime
-from slothy.db import models
-from slothy.regional.brasil.enderecos import models as enderecos
-from slothy.api.models import AbstractUser
-from slothy.decorators import attr, action, param, fieldset, dashboard, fieldsets
-
-
-class Telefone(models.Model):
-    ddd = models.IntegerField(verbose_name='DDD')
-    numero = models.CharField(verbose_name='Telefone', max_length=255)
-
-    class Meta:
-        verbose_name = 'Telefone'
-        verbose_name_plural = 'Telefones'
-
-    def __str__(self):
-        return '({}) {}'.format(self.ddd, self.numero)
-
-    @fieldsets({'Dados Gerais': (('ddd', 'numero'),)})
-    def add(self):
-        super().add()
-
-
-class EstadoSet(models.Set):
-
-    @dashboard.shortcut()
-    @dashboard.card()
-    @attr('Estados com Descrição', icon='map')
-    def all(self):
-        return self.display(
-            'nome', 'cor'
-        ).filter_by(
-            'ativo'
-        ).search_by(
-            'nome', 'sigla'
-        ).subsets(
-            'ativos', 'inativos'
-        ).paginate(
-            10
-        ).lookups(
-            'presidente',
-            'self__governador__pessoa'
-        ).allow(
-            'add', 'edit', 'delete', 'view', 'ativar', 'inativar'
-        )
-
-    @dashboard.center()
-    @attr('Ativos')
-    def ativos(self):
-        return self.filter(ativo=True).display('nome', 'sigla').lookups(
-            'presidente', 'self__governador__pessoa').allow('inativar', 'edit').search_by('sigla')
-
-    @attr('Inativos')
-    def inativos(self):
-        return self.filter(ativo=False).allow('ativar').search_by('sigla')
-
-    @action('Ativar')
-    def ativar_todos(self):
-        self.update(ativo=True)
-
-    @action('Agendar Inativacao')
-    @param(data=models.DateField('Data'))
-    def agendar_inativacao(self, data):
-        self.update(ativo=False)
-
-    @action('Atualizar Status')
-    def atualizar_status(self, ativo):
-        self.update(ativo=ativo)
-
-    @action('Agendar Atualização de Status')
-    @param(data=models.DateField('Data'))
-    def agendar_atualizacao_status(self, ativo, data):
-        self.update(ativo=ativo)
-
-    @classmethod
-    @action('Inativar Todos')
-    def inativar_todos(cls):
-        Estado.objects.update(ativo=False)
-
-    @classmethod
-    @attr('Agendar Inativação Total')
-    @param(data=models.DateField('Data'))
-    def agendar_inativacao_total(cls, data):
-        Estado.objects.update(ativo=False)
-
-
-class Estado(models.Model):
-    nome = models.CharField(verbose_name='Nome', max_length=255)
-    sigla = models.CpfField(verbose_name='Sigla', max_length=255)
-    ativo = models.BooleanField(verbose_name='Ativo', default=True)
-    cor = models.ColorField(verbose_name='Cor', max_length=10, blank=True)
-
-    class Meta:
-        icon = 'map'
-        verbose_name = 'Estado'
-        verbose_name_plural = 'Estados'
-
-    def __str__(self):
-        return self.sigla
-
-    @action('Cadastrar')
-    def add(self):
-        super().add()
-
-    @action('Editar', icon='edit')
-    def edit(self):
-        super().edit()
-
-    @action('Testar')
-    def testar(self):
-        print()
-
-    @action('Excluir')
-    def delete(self):
-        super().delete()
-
-    @action('Visualizar')
-    def view(self):
-        return super().view()
-
-    @fieldset('Dados Gerais')
-    def get_dados_gerais(self):
-        return self.values(('nome', 'sigla', 'ativo'),)
-
-    @attr('Dados Populacionais')
-    def get_dados_populacionais(self):
-        return self.values('get_populacao')
-
-    @fieldset('Cidades')
-    def get_cidades(self):
-        return self.cidade_set.allow('add', 'remove')
-
-    @action('Ativar')
-    def ativar(self):
-        self.ativo = True
-        self.save()
-
-    @action('Inativar')
-    def inativar(self):
-        self.ativo = False
-        self.save()
-
-    @attr('População')
-    def get_populacao(self):
-        return 279876
-
-    @action('Alterar Sigla')
-    def alterar_sigla(self, sigla):
-        self.sigla = sigla
-        self.save()
-
-    @action('Programar Ativação')
-    @param(data=models.DateField('Data da Ativação'))
-    def programar_ativacao(self, data):
-        pass
-
-
-class CidadeSet(models.Set):
-
-    @dashboard.shortcut()
-    @attr('Cidades', lookups=('governador', 'prefeito', 'presidente'), icon='house')
-    def all(self):
-        return self.filter_by(
-            'estado', 'prefeito', 'estado__ativo', 'vereadores'
-        ).display(
-            'get_dados_gerais'
-        ).lookups(
-            'self__estado__governador__pessoa', 'self__prefeito', 'presidente'
-        ).sort_by('nome', 'estado').allow('add', 'view', 'edit')
-
-
-class Cidade(models.Model):
-    nome = models.CharField(verbose_name='Nome', max_length=255)
-    estado = models.ForeignKey(Estado, verbose_name='Estado', on_delete=models.CASCADE, filter_display=('nome', 'sigla'))
-    prefeito = models.ForeignKey('base.Pessoa', verbose_name='Prefeito', null=True, blank=True)
-    vereadores = models.ManyToManyField('base.Pessoa', verbose_name='Vereadores', blank=True, related_name='cidades_legisladas')
-    pontos_turisticos = models.ManyToManyField('base.PontoTuristico', verbose_name='Pontos Turísticos', blank=True)
-    localizacao = models.GeoLocationField(verbose_name='Localização', null=True, blank=True)
-
-    class Meta:
-        verbose_name = 'Cidade'
-        verbose_name_plural = 'Cidades'
-
-    def __str__(self):
-        return '{}/{}'.format(self.nome, self.estado)
-
-    @action('Adicionar')
-    @fieldsets({
-        'Dados Gerais': (('nome', 'estado'),),
-        'Administração': ('prefeito', 'vereadores'),
-        'Localização': ('localizacao',)
-    })
-    def add(self):
-        super().add()
-
-    @staticmethod
-    def add_choices():
-        return dict(
-            prefeito=Pessoa.objects.filter(id__lt=3)
-        )
-
-    @staticmethod
-    def add_initial():
-        return dict(nome='Rio Grande do Norte')
-
-    @action('Editar')
-    def edit(self):
-        super().edit()
-
-    @action('Visualizar')
-    def view(self):
-        return super().view()
-
-    @fieldset('Dados Gerais')
-    def get_dados_gerais(self):
-        return self.values('nome', ('estado', 'get_qtd_pontos_turisticos')).allow('edit')
-
-    # Dados Administrativos
-    @fieldsets('Dados Administrativos')
-    def get_dados_administrativos(self):
-        return self.values('get_prefeito', 'get_vereadores')
-
-    @attr('Prefeito')
-    def get_prefeito(self):
-        return self.values('prefeito__nome', 'prefeito__email').allow('set_prefeito')
-
-    @attr('Vereadores')
-    def get_vereadores(self):
-        return self.vereadores
-
-    @attr('Teste')
-    def teste(self):
-        return self.values('get_dados_gerais', 'get_qtd_pontos_turisticos')
-
-    @attr('Teste 2', lookups=('presidente', 'governador__pessoa', 'self__prefeito', 'self__vereadores'))
-    def teste2(self):
-        return self.values('get_dados_gerais', 'get_qtd_pontos_turisticos')
-
-    # Dados Turísticos
-    @fieldsets('Dados Turísticos')
-    def get_dados_turisticos(self):
-        return self.values('get_qtd_pontos_turisticos', 'get_pontos_turisticos')
-
-    @attr('Quantidade de Pontos Turísticos')
-    def get_qtd_pontos_turisticos(self):
-        return self.pontos_turisticos.count()
-
-    @fieldset('Pontos Turísticos')
-    def get_pontos_turisticos(self):
-        return self.pontos_turisticos.display('nome').allow('add', 'remove')
-
-    # Dados Estatísticos
-    @fieldsets('Dados Estatísticos')
-    def get_dados_estatisticos(self):
-        return self.values('get_estatisticas')
-
-    @attr('Estatística Populacional')
-    def get_estatisticas(self):
-        return {
-            'Polulação Infantil': 288989,
-            'População Adulta': 9389332
-        }
-
-    @fieldset('Localização')
-    def get_localizacao(self):
-        return self.localizacao
-
-    @action('Definir Prefeito')
-    def set_prefeito(self, prefeito):
-        self.prefeito = prefeito
-        self.save()
-
-
-class MunicipioSet(models.Set):
-
-    @dashboard.card()
-    @attr('Municípios')
-    def all(self):
-        return self.display('nome', 'estado', 'codigo').search_by('nome')
-
-    # @dashboard.center(formatter='rnmap')
-    @attr('Geolocalizados', icon='map')
-    def geolocalizados(self):
-        return self.filter(estado__sigla='RN', nome__icontains='mo').display('nome', 'estado', 'codigo', 'get_cor').paginate(200)
-
-
-class Municipio(enderecos.Municipio):
-
-    class Meta:
-        icon = 'map'
-        verbose_name = 'Município'
-        verbose_name_plural = 'Municípios'
-        proxy = True
-
-    def __str__(self):
-        return '{}/{}'.format(self.nome, self.estado)
-
-    @attr('Cor')
-    def get_cor(self):
-        if self.nome.startswith('Moss'):
-            return '#FF0000'
-        else:
-            return '#00FF00'
-
-    @action('Cadastrar')
-    @fieldsets({'Dados Gerais': ('nome', 'estado', 'codigo')})
-    def add(self):
-        super().add()
-
-    @action('Editar', icon='edit')
-    def edit(self):
-        super().edit()
-
-    @action('Excluir')
-    def delete(self):
-        super().delete()
-
-    @action('Visualizar')
-    def view(self):
-        return super().view()
-
-
-class Endereco(models.Model):
-    logradouro = models.CharField(verbose_name='Logradouro', max_length=100)
-    numero = models.IntegerField(verbose_name='Número')
-    cidade = models.ForeignKey(Cidade, verbose_name='Cidade', null=True)
-
-    class Meta:
-        verbose_name = 'Endereço'
-        verbose_name_plural = 'Endereços'
-
-    def __str__(self):
-        return '{}, {}, {}'.format(self.logradouro, self.numero, self.cidade)
-
-    @fieldsets({'Dados Gerais': (('logradouro', 'numero', 'cidade'),)})
-    def add(self):
-        super().add()
-
-    @action('Visualizar')
-    def view(self):
-        return super().view()
-
-
-class PessoaSet(models.Set):
-
-    @dashboard.shortcut()
-    @dashboard.bottom_bar()
-    @dashboard.floating()
-    @dashboard.calendar()
-    @attr('Pessoas', icon='people_alt')
-    def all(self):
-        return self.display('nome').allow('add', 'view')
-
-    @dashboard.calendar()
-    @attr('Pessoas Inativas', icon='people_alt')
-    def all2(self):
-        return self.display('nome', 'last_login')
-
-    @dashboard.calendar()
-    @attr('Pessoas Ativas', icon='people_alt')
-    def all3(self):
-        return self.display('nome', 'email', 'foto').lookups(
-            'self__endereco__cidade__estado__governador__pessoa',
-            'self__endereco__cidade__prefeito', 'presidente',
-            'self__endereco__cidade__vereadores'
-        )
-
-
-class Pessoa(AbstractUser):
-
-    nome = models.CharField(verbose_name='Nome', max_length=255)
-    email = models.EmailField(verbose_name='E-mail', unique=True, max_length=255, is_username=True)
-    foto = models.ImageField(verbose_name='Foto', null=True, blank=True, upload_to='fotos')
-
-    endereco = models.OneToOneField(Endereco, verbose_name='Endereço', null=True, blank=True)
-
-    telefones = models.OneToManyField(Telefone, verbose_name='Telefones')
-
-    class Meta:
-        icon = 'people_alt'
-        verbose_name = 'Pessoa'
-        verbose_name_plural = 'Pessoas'
-
-    def __str__(self):
-        return self.nome
-
-    @action('Cadastrar', atomic=True, icon='people_alt')
-    @fieldsets({
-        'Dados Gerais': ('nome', ('email', 'foto', 'password', 'last_login'),),
-        'Endereço': 'endereco',
-        'Telefones': 'telefones'
-    })
-    def add(self):
-        super().add()
-
-    @action('Editar')
-    def edit(self):
-        super().edit()
-
-    @action('Excluir')
-    def delete(self):
-        super().delete()
-
-    @action('Visualizar')
-    def view(self):
-        return super().view()
-
-    @fieldset('Dados Gerais')
-    def get_dados_gerais(self):
-        return self.values('nome', ('email', 'foto'))
-
-    @fieldset('Dados de Acesso')
-    def get_dados_acesso(self):
-        return self.values(('last_login', 'get_senha'), 'groups')
-
-    @attr('Grupos')
-    def get_grupos(self):
-        return self.groups
-
-    @attr('Senha')
-    def get_senha(self):
-        return '*****'
-
-    @action('Atualizar Nome')
-    @param(data_atualizacao=models.DateField())
-    def atualizar_nome(self, nome):
-        self.nome = nome
-        self.save()
-
-    @action('Alterar Senha')
-    @param(senha=models.CharField('Senha'))
-    def alterar_senha(self, senha):
-        super().change_password(senha)
-
-    @attr('Telefones')
-    def get_telefones(self):
-        return self.telefones.all()
-
-
-class PontoTuristicoSet(models.Set):
-
-    @dashboard.center(formatter='round_image', priority=10)
-    @dashboard.shortcut()
-    @dashboard.bottom_bar()
-    @dashboard.floating()
-    @attr('Pontos Turísticos', icon='wb_sunny')
-    def all(self):
-        return super().display('foto', 'nome').search_by('nome').order_by('nome').allow(
-            'add', 'edit', 'delete', 'teste2', 'view'
-        )
-
-    @attr('Referenciados')
-    def referenciados(self):
-        return self.filter(cidade__isnull=False)
-
-    @attr('Referenciados')
-    @param(sigla=models.CharField())
-    def referenciados_no_estado(self, sigla):
-        return self.filter(cidade__estado__sigla=sigla)
-
-    @classmethod
-    @action('Remover Tudo')
-    def remover_tudo(cls):
-        PontoTuristico.objects.all().delete()
-
-    @staticmethod
-    def teste_initial():
-        return dict(data=datetime.date.today())
-
-    @action('Teste')
-    @param(data=models.DateField('Data'))
-    def teste(self, data):
-        print(self.count(), data)
-
-    @dashboard.center()
-    @attr('Total por Cidade', icon='pie_chart')
-    def total_por_cidade(self):
-        return self.count('cidade')
-
-    @dashboard.floating()
-    @attr('Total por Cidade e Status', icon='insert_chart_outlined', formatter='bar_chart')
-    def total_por_cidade_ativo(self):
-        return self.count('cidade', 'ativo')
-
-
-class PontoTuristico(models.Model):
-    foto = models.ImageField(verbose_name='Foto', upload_to='fotos', null=True, blank=True)
-    nome = models.CharField(verbose_name='Nome', max_length=255)
-    ativo = models.BooleanField(verbose_name='Ativo', default=True)
-
-    class Meta:
-        verbose_name = 'Ponto Turístico'
-        verbose_name_plural = 'Pontos Turísticos'
-
-    def __str__(self):
-        return '{}'.format(self.nome)
-
-    @action('Visualizar')
-    def view(self):
-        return super().view()
-
-    @action('Cadastrar')
-    def add(self):
-        super().add()
-
-    @action('Editar')
-    def edit(self):
-        super().edit()
-
-    @fieldset('Dados Gerais')
-    def get_dados_gerais(self):
-        return self.values('nome', 'ativo')
-
-    @action('Atualizar Nome')
-    def atualizar_nome(self, nome):
-        raise models.ValidationError('Período de edição ainda não está aberto')
-
-    @action('Excluir')
-    def delete(self):
-        super().delete()
-
-    @attr('Cidades')
-    def get_cidades(self):
-        return self.cidade_set.all()
-
-    @staticmethod
-    def teste2_initial():
-        return dict(data=datetime.date.today())
-
-    @action('Teste')
-    @param(data=models.DateField('Data'))
-    def teste2(self, data):
-        print(self.id, data)
-
-
-class PresidenteSet(models.Set):
-    @attr('Presidentes')
-    def all(self):
-        return self
-
-
-class Presidente(Pessoa):
-
-    class Meta:
-        verbose_name = 'Presidente'
-        verbose_name_plural = 'Presidentes'
-
-    def __str__(self):
-        return '{}'.format(self.nome)
-
-
-class GovernadorSet(models.Set):
-    @attr('Governadores')
-    def all(self):
-        return self
-
-
-class Governador(models.Model):
-    pessoa = models.ForeignKey(Pessoa, verbose_name='Pessoa')
-    estado = models.ForeignKey(Estado, verbose_name='Estado')
-
-    class Meta:
-        verbose_name = 'Governador'
-        verbose_name_plural = 'Governadores'
-
-    def __str__(self):
-        return '{} - {}'.format(self.pessoa, self.estado)
diff --git a/tests/project/base/static/round-blue.png b/tests/project/base/static/round-blue.png
deleted file mode 100644
index 534daa5..0000000
Binary files a/tests/project/base/static/round-blue.png and /dev/null differ
diff --git a/tests/project/base/views.py b/tests/project/base/views.py
deleted file mode 100644
index e36e800..0000000
--- a/tests/project/base/views.py
+++ /dev/null
@@ -1,19 +0,0 @@
-from slothy.api.ui.views import View, Markdown
-from .models import Cidade
-from slothy.decorators import dashboard
-
-
-@dashboard.shortcut()
-class Teste(View):
-
-    class Meta:
-        title = 'Teste'
-        lookups = ()
-
-    def view(self):
-        print(self.request.user)
-        return Cidade.objects.all()
-
-
-class Texto(Markdown):
-    pass
diff --git a/tests/project/manage.py b/tests/project/manage.py
deleted file mode 100755
index d5ff47f..0000000
--- a/tests/project/manage.py
+++ /dev/null
@@ -1,14 +0,0 @@
-#!/usr/bin/env python
-import os
-import sys
-import warnings
-
-warnings.filterwarnings(
-    "ignore", module='(rest_framework|ruamel|scipy|reportlab|django|jinja|corsheaders)'
-)
-
-if __name__ == "__main__":
-    os.environ.setdefault("DJANGO_SETTINGS_MODULE", "settings")
-    from django.core.management import execute_from_command_line
-
-    execute_from_command_line(sys.argv)
diff --git a/tests/project/settings.py b/tests/project/settings.py
deleted file mode 100644
index 28d6811..0000000
--- a/tests/project/settings.py
+++ /dev/null
@@ -1,24 +0,0 @@
-# -*- coding: utf-8 -*-
-import os
-from slothy.conf.settings import *
-
-DEBUG = True
-BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))
-
-PROJECT_NAME = 'Projeto'
-ROOT_URLCONF = 'slothy.api.urls'
-SECRET_KEY = '1eb66f2e7a0311eb9e473c15c2da2c92'
-
-DATABASES = {
-    'default': {
-        'ENGINE': 'django.db.backends.sqlite3',
-        'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),
-    }
-}
-
-INSTALLED_APPS = DEFAULT_APPS + (
-    'base',
-    'slothy.regional.brasil.enderecos',
-)
-
-MEDIA_ROOT = os.path.join(BASE_DIR, 'project', 'media')
diff --git a/tests/project/tests.py b/tests/project/tests.py
deleted file mode 100644
index 5a763d7..0000000
--- a/tests/project/tests.py
+++ /dev/null
@@ -1,281 +0,0 @@
-from django.test import TestCase
-from base.models import Pessoa, Estado, Cidade, PontoTuristico, Presidente, Governador, Telefone, Endereco
-from slothy.api.models import Group
-import json
-
-# /queryset
-# /queryset/<filter>
-
-# /user
-# /login
-# /logout
-
-# /base/estado
-# /base/estado/ativos
-# /base/estado/inativar
-# /base/estado/inativar_todos
-# /base/estado/<id>/view
-# /base/estado/<id>/edit
-# /base/estado/<id>/delete
-# /base/estado/<id>/altualizar_sigla
-# /base/estado/<id>/get_cidades
-# /base/estado/<id>/get_cidades/add
-# /base/estado/<id>/get_cidades/remove
-# /base/estado/<id>/get_pontos_turisticos/add
-# /base/estado/<id>/get_pontos_turisticos/remove
-
-# curl -H "Content-Type: application/json" -X POST http://localhost:8000/api/login/ -d '{"username": "brenokcc@yahoo.com.br", "password": "senha"}'
-# curl -H "Content-Type: application/json" -H "Authorization: Token 3853ded71e2cb8299a1e1c7e45c4722a787a45e9" -X GET http://localhost:8000/api/base/estado/
-
-
-
-def log(response):
-    print(json.dumps(response, indent=2, sort_keys=False, ensure_ascii=False))
-
-
-class MainTestCase(TestCase):
-
-    def setUp(self):
-        Group.objects.all().delete()
-
-    def get(self, url, data=None):
-        data = json.dumps(data) if data is not None else None
-        response = self.client.get(url, data=data, content_type='application/json')
-        return json.loads(response.content)
-
-    def post(self, url, data=None):
-        data = json.dumps(data) if data is not None else None
-        response = self.client.post(url, data=data, content_type='application/json')
-        return json.loads(response.content)
-
-    def test_models(self):
-
-        estado = Estado(nome='São Paulo', sigla='SP', ativo=False)
-        estado.add()
-        estado = Estado(nome='Rio Grande do Norte', sigla='RN')
-        estado.add()
-        self.assertEqual(Estado.objects.all().count(), 2)
-
-        # one-to-many
-        print(estado.get_cidades())
-        macaiba = estado.get_cidades().add(Cidade(nome='Macaíba'))
-        natal = estado.get_cidades().add(Cidade(nome='Natal'))
-
-        # many-to-many
-        parque_da_cidade = natal.get_pontos_turisticos().add(PontoTuristico(nome='Parque da Cidade'))
-        print(natal, natal.get_pontos_turisticos())
-        natal.get_pontos_turisticos().remove(parque_da_cidade)
-        print(natal, natal.get_pontos_turisticos())
-        parnamirim = estado.get_cidades().add(Cidade(nome='Parnamirim'))
-
-        # reverse many-to-many
-        print(macaiba, macaiba.get_pontos_turisticos())
-        parque_da_cidade.cidade_set.add(macaiba)
-        print(macaiba, macaiba.get_pontos_turisticos())
-        print(parque_da_cidade, parque_da_cidade.cidade_set)
-        parque_da_cidade.cidade_set.remove(macaiba)
-        print(parque_da_cidade, parque_da_cidade.cidade_set)
-        print(macaiba, macaiba.get_pontos_turisticos())
-
-        print(estado.get_cidades())
-        estado.get_cidades().remove(parnamirim)
-        print(estado.get_cidades())
-
-        self.assertTrue(1)
-
-    def test_login(self):
-        pessoa = Pessoa.objects.create(nome='Carlos Breno', email='brenokcc@yahoo.com.br')
-        pessoa.alterar_senha('senha')
-        # getting the metadata
-        r = self.get('/api/login')
-        data = r['input']
-        # setting the data
-        data['username'] = 'brenokcc@yahoo.com.br'
-        data['password'] = 'senha'
-        r = self.post('/api/forms/loginform', data=data)
-        self.assertEqual(r['message'], 'Login realizado com sucesso')
-        self.assertIsNotNone(r['token'])
-        # getting authenticated user
-        r = self.get('/api/user')
-        self.assertIsNotNone(r['data'])
-        # logging out
-        r = self.get('/api/logout')
-        self.assertEqual(r['text'], 'Logout realizado com sucesso')
-        r = self.get('/api/user')
-        self.assertEqual(r['text'], 'Usuário não autenticado')
-        # wrong password
-        data['password'] = '123'
-        r = self.post('/api/forms/loginform', data=data)
-        self.assertEqual(r['text'], 'Usuário e senha não conferem')
-
-    def test_api(self):
-        data = dict(nome='Parque do Povo')
-        # add
-        r = self.post('/api/base/pontoturistico/add/', data=data)
-        self.assertEqual(r, dict(type='message', text='Cadastro realizado com sucesso'))
-        self.assertEqual(PontoTuristico.objects.count(), 1)
-        # list
-        r = self.get('/api/base/pontoturistico/')
-        self.assertEqual(len(r['data']), 1)
-        # view
-        r = self.get('/api/base/pontoturistico/1/')
-        self.assertIn([{'Nome': 'Parque do Povo'}], r['data'][0]['data']['fields'])
-        # edit
-        data = dict(nome='Parque da Cidade')
-        r = self.post('/api/base/pontoturistico/1/edit/', data=data)
-        self.assertEqual(r, dict(type='message', text='Edição realizada com sucesso'))
-        r = self.get('/api/base/pontoturistico/1/')
-        self.assertIn([{'Nome': 'Parque da Cidade'}], r['data'][0]['data']['fields'])
-        self.assertEqual(PontoTuristico.objects.count(), 1)
-        # validation error
-        data = dict(nome='Parque da Cidade')
-        r = self.post('/api/base/pontoturistico/1/atualizar_nome/', data=data)
-        self.assertEqual(r, dict(type='error', text='Período de edição ainda não está aberto', errors=[]))
-        # delete
-        r = self.post('/api/base/pontoturistico/1/delete/')
-        self.assertEqual(r, dict(type='message', text='Exclusão realizada com sucesso'))
-        self.assertEqual(PontoTuristico.objects.count(), 0)
-
-        # one-to-many (add)
-        data = dict(nome='Rio Grande do Norte', sigla='RN')
-        r = self.post('/api/base/estado/add/', data=data)
-        self.assertEqual(r, dict(type='message', text='Cadastro realizado com sucesso'))
-        r = self.get('/api/base/estado/1/get_cidades/')
-        self.assertEqual(r['data']['Cidades']['total'], 0)
-        data = dict(nome='Natal')
-        r = self.post('/api/base/estado/1/get_cidades/add/', data=data)
-        self.assertEqual(r, dict(type='message', text='Cadastro realizado com sucesso'))
-        r = self.get('/api/base/estado/1/get_cidades/')
-        self.assertEqual(r['data']['Cidades']['total'], 1)
-
-        # many-to-many (add)
-        data = dict(nome='Morro do Careca')
-        r = self.post('/api/base/pontoturistico/add/', data=data)
-        self.assertEqual(r, dict(type='message', text='Cadastro realizado com sucesso'))
-        r = self.get('/api/base/pontoturistico/')
-        pk = r['data'][0][0]
-        r = self.get('/api/base/cidade/1/get_pontos_turisticos/')
-        self.assertEqual(r['data']['Pontos Turísticos']['total'], 0)
-        data = dict(ids=[pk])
-        r = self.post('/api/base/cidade/1/get_pontos_turisticos/add/', data=data)
-        self.assertEqual(r, dict(type='message', text='Ação realizada com sucesso'))
-        r = self.get('/api/base/cidade/1/get_pontos_turisticos/')
-        self.assertEqual(r['data']['Pontos Turísticos']['total'], 1)
-
-        # many-to-many (remove)
-        r = self.post('/api/base/cidade/1/get_pontos_turisticos/remove/{}'.format(pk))
-        self.assertEqual(r, dict(type='message', text='Ação realizada com sucesso'))
-        r = self.get('/api/base/cidade/1/get_pontos_turisticos/')
-        self.assertEqual(r['data']['Pontos Turísticos']['total'], 0)
-
-        # one-to-many (remove)
-        r = self.get('/api/base/estado/1/get_cidades/')
-        pk = r['data']['Cidades']['data'][0][0]
-        r = self.post('/api/base/estado/1/get_cidades/remove/{}'.format(pk))
-        self.assertEqual(r, dict(type='message', text='Ação realizada com sucesso'))
-        r = self.get('/api/base/estado/1/get_cidades/')
-        self.assertEqual(r['data']['Cidades']['total'], 0)
-
-        # many-to-many (reverse)
-        sp = Estado.objects.create(nome='São Paulo', sigla='SP')
-        guarulhos = Cidade.objects.create(nome='Guarulhos', estado=sp)
-        data = dict(ids=[guarulhos.pk])
-        r = self.post('/api/base/pontoturistico/2/get_cidades/add/', data=data)
-        self.assertEqual(r, dict(type='message', text='Ação realizada com sucesso'))
-        r = self.get('/api/base/pontoturistico/2/get_cidades/')
-        self.assertEqual(r['data']['Cidades']['total'], 1)
-
-    def test_queryset(self):
-        estado = Estado(nome='Rio Grande do Norte', sigla='RN')
-        estado.add()
-        estado.get_cidades().add(Cidade(nome='Macaíba'))
-        estado.get_cidades().add(Cidade(nome='Natal'))
-        response = self.get('/api/base/cidade/')
-        response['input']['q'] = 'Maca'
-        search_response = self.post(
-            response['path'],
-            data=response['input']
-        )
-        self.assertEqual(type(search_response), dict)
-        self.assertEqual(type(search_response['data']), list)
-        self.assertEqual(type(search_response['total']), int)
-
-    def test_lookups(self):
-        bolsonaro = Presidente.objects.create(nome='Jair Bolsonaro')
-        fatima = Pessoa.objects.create(nome='Fátima', email='fatima@mail.com')
-        alvaro_dias = Pessoa.objects.create(nome='Álvaro Dias', email='alvaro@mail.com')
-        kelps = Pessoa.objects.create(nome='Kelps', email='kelps@mail.com')
-
-        rn = Estado.objects.create(nome='Rio Grande do Norte', sigla='RN')
-        sp = Estado.objects.create(nome='São Paulo', sigla='SP')
-
-        Governador.objects.create(pessoa=fatima, estado=rn)
-
-        natal = Cidade.objects.create(nome='Natal', estado=rn, prefeito=alvaro_dias)
-
-        parnamirim = Cidade.objects.create(nome='Parnamirim', estado=rn)
-        sao_paulo = Cidade.objects.create(nome='São Paulo', estado=sp)
-        Cidade.objects.create(nome='Guarulhos', estado=sp)
-
-        endereco = Endereco.objects.create(logradouro='Centro', numero=1, cidade=parnamirim)
-        Pessoa.objects.create(nome='Fulano', email='fulano@mail.com', endereco=endereco)
-
-        endereco = Endereco.objects.create(logradouro='Centro', numero=1, cidade=natal)
-        Pessoa.objects.create(nome='Beltrano', email='beltrano@mail.com', endereco=endereco)
-
-        endereco = Endereco.objects.create(logradouro='Centro', numero=1, cidade=sao_paulo)
-        Pessoa.objects.create(nome='Cicrano', email='cicrano@mail.com', endereco=endereco)
-
-
-        # states
-        self.assertEqual(Estado.objects.all().apply_lookups(bolsonaro).count(), 2)
-        self.assertEqual(Estado.objects.all().apply_lookups(fatima).count(), 1)
-
-        # cities
-        self.assertEqual(Cidade.objects.all().apply_lookups(bolsonaro).count(), 4)
-        self.assertEqual(Cidade.objects.all().apply_lookups(fatima).count(), 2)
-        self.assertEqual(Cidade.objects.all().apply_lookups(kelps).count(), 0)
-
-        # action lookups
-        self.assertTrue(natal.check_lookups('teste2', bolsonaro))
-        self.assertTrue(natal.check_lookups('teste2', fatima))
-        natal.prefeito = None
-        natal.save()
-        self.assertFalse(natal.check_lookups('teste2', alvaro_dias))
-        natal.prefeito = alvaro_dias
-        natal.save()
-        self.assertTrue(natal.check_lookups('teste2', alvaro_dias))
-        self.assertFalse(natal.check_lookups('teste2', kelps))
-        natal.vereadores.add(kelps)
-        self.assertTrue(natal.check_lookups('teste2', kelps))
-
-        self.assertEqual(Pessoa.objects.all3().apply_lookups(bolsonaro).count(), Pessoa.objects.count())
-        self.assertEqual(Pessoa.objects.all3().apply_lookups(fatima).count(), 2)
-        self.assertEqual(Pessoa.objects.all3().apply_lookups(alvaro_dias).count(), 1)
-        self.assertEqual(Pessoa.objects.all3().apply_lookups(kelps).count(), 1)
-
-    def test_one_to_many(self):
-        telefones = [
-            dict(ddd=84, numero='99106-2760'),
-            dict(ddd=84, numero='')
-        ]
-        data = dict(nome='Carlos Breno', email='brenokcc@yahoo.com.br', telefones=telefones)
-        r = self.post('/api/base/pessoa/add/', data=data)
-        self.assertIsNone(Pessoa.objects.first())
-        error = dict(field='numero', message='Este campo é obrigatório.', one_to_many='telefones', index=1)
-        self.assertEqual(r['text'], 'Por favor, corriga os erros abaixo')
-        self.assertIn(error, r['errors'])
-        telefones[1]['numero'] = '3272-3898'
-        r = self.post('/api/base/pessoa/add/', data=data)
-        self.assertIsNotNone(Pessoa.objects.first())
-        self.assertEqual(Telefone.objects.count(), 2)
-        self.assertEqual(r, dict(type='message', text='Cadastro realizado com sucesso'))
-
-    def test_many_to_many(self):
-        rn = Estado.objects.create(nome='Rio Grande do Norte', sigla='RN')
-        va = Pessoa.objects.create(nome='Vereador A', email='va@mail.com')
-        vb = Pessoa.objects.create(nome='Vereador B', email='vb@mail.com')
-        data = dict(nome='Natal', estado=rn.pk, prefeito=None, vereadores=[va.pk, vb.pk])
-        r = self.post('/api/base/cidade/add/', data=data)
-        self.assertEqual(r, dict(type='message', text='Cadastro realizado com sucesso'))
-        self.assertEqual(Cidade.objects.first().vereadores.count(), 2)
